[
    {
        "created": "20230928082945072",
        "creator": "oeyoews",
        "text": "\"use strict\";\nvar drawioUnmountCheckTimer,\n  editTextWidgetFactory = require(\"$:/core/modules/editor/factory.js\")[\n    \"editTextWidgetFactory\"\n  ],\n  SimpleEngine = require(\"$:/core/modules/editor/engines/simple.js\")[\n    \"SimpleEngine\"\n  ],\n  decode = require(\"$:/plugins/Gk0Wk/drawio/base64.min.js\")[\"decode\"],\n  checkIfDarkMode =\n    ($tw.utils.registerFileType(\"application/x-drawio\", \"utf8\", \".drawio\", {\n      flags: [\"image\"],\n    }),\n    $tw.utils.registerFileType(\"application/vnd.drawio\", \"utf8\", \".drawio\", {\n      flags: [\"image\"],\n    }),\n    () => {\n      var e;\n      return (\n        \"dark\" ===\n        (null ==\n        (e =\n          null ==\n          (e = $tw.wiki.getTiddler($tw.wiki.getTiddlerText(\"$:/palette\")))\n            ? void 0\n            : e.fields)\n          ? void 0\n          : e[\"color-scheme\"])\n      );\n    }),\n  drawioEditorInstance = new Set(),\n  registerInstance = (e) => {\n    $tw.browser &&\n      void 0 === drawioUnmountCheckTimer &&\n      (drawioEditorInstance.add(e),\n      (drawioUnmountCheckTimer = setInterval(() => {\n        var e = [];\n        for (const t of drawioEditorInstance)\n          (void 0 !== t.iframeNode && document.contains(t.iframeNode)) ||\n            e.push(t);\n        for (const i of e) drawioEditorInstance[\"delete\"](i);\n        drawioEditorInstance.size < 1 &&\n          ((drawioUnmountCheckTimer = void 0),\n          clearInterval(drawioUnmountCheckTimer));\n      }, 1e3)));\n  },\n  DrawIOEditor = class {\n    constructor({ widget: d, value: e, parentNode: t, nextSibling: i }) {\n      if ($tw.browser) {\n        (this.iframeNode = $tw.utils.domMaker(\"iframe\", {\n          document: d.document,\n          class: \"gk0wk-drawio-iframe\",\n          attributes: { frameborder: \"0\" },\n          style: {\n            margin: \"0\",\n            border: \"none\",\n            width: \"100%\",\n            minHeight: \"700px\",\n            maxHeight: \"90vh\",\n            height: \"100%\",\n          },\n        })),\n          t.insertBefore(this.iframeNode, i),\n          (this.xml = e);\n        let s = !1;\n        const o = ({ data: e, source: t }) => {\n          var i;\n          if (\n            null !==\n              (null == (i = this.iframeNode) ? void 0 : i.contentWindow) &&\n            t === this.iframeNode.contentWindow\n          ) {\n            setTimeout(() => {\n              console.log(\"loging\");\n            }, 1000);\n            const { event: n, ...a } = JSON.parse(e);\n            switch (n) {\n              case \"init\":\n                if (s) return;\n                (s = !0),\n                  this.iframeNode.contentWindow.postMessage(\n                    JSON.stringify({\n                      action: \"load\",\n                      xml: this.xml,\n                      autosave: 1,\n                    }),\n                    \"*\"\n                  );\n                break;\n              case \"configure\":\n                this.iframeNode.contentWindow.postMessage(\n                  JSON.stringify({\n                    action: \"configure\",\n                    config: { compressXml: !0, enableCssDarkMode: !1 },\n                  }),\n                  \"*\"\n                );\n                break;\n              case \"load\":\n              case \"save\":\n              case \"autosave\":\n                this.iframeNode.contentWindow.postMessage(\n                  JSON.stringify({\n                    action: \"export\",\n                    format: \"xmlsvg\",\n                    embedImages: !0,\n                    keepTheme: !0,\n                    twEditor: !0,\n                  }),\n                  \"*\"\n                );\n                break;\n              case \"openLink\":\n                var { href: r, target: o } = a;\n                window.open(r, o);\n                break;\n              case \"export\":\n                var { message: r, data: o } = a;\n                if (o && r.twEditor) {\n                  r = decode(o.split(\",\", 2)[1]);\n                  if (r === this.xml) return;\n                  (this.xml = r), d.saveChanges(r);\n                }\n            }\n          }\n        };\n        var r =\n          $tw.wiki.getTiddlerText(\n            checkIfDarkMode()\n              ? \"$:/plugins/Gk0Wk/drawio/config/theme-dark\"\n              : \"$:/plugins/Gk0Wk/drawio/config/theme-light\",\n            \"\"\n          ) || \"Kennedy\";\n        window.addEventListener(\"message\", o),\n          this.iframeNode.setAttribute(\n            \"src\",\n            `https://embed.diagrams.net/?embed=1&ui=${r}&spin=1&libraries=1&noExitBtn=1&saveAndExit=0&noSaveBtn=1&proto=json&protocol=json&configure=1`\n          ),\n          (this.unmount = () => {\n            window.removeEventListener(\"message\", o);\n          }),\n          registerInstance(this);\n      } else\n        t.insertBefore(\n          $tw.utils.domMaker(\"div\", {\n            document: d.document,\n            class: \"gk0wk-drawio-preview\",\n            style: {\n              margin: \"0\",\n              border: \"none\",\n              width: \"100%\",\n              height: \"100%\",\n            },\n            innerHTML: e,\n          }),\n          i\n        ),\n          (this.xml = \"\"),\n          (this.unmount = () => null);\n    }\n    loadXml(e) {\n      var t, i;\n      e !== this.xml &&\n        null !=\n          (i =\n            null ==\n            (t = null == (t = this.iframeNode) ? void 0 : t.contentWindow)\n              ? void 0\n              : t.postMessage) &&\n        i.call(t, JSON.stringify({ action: \"load\", xml: e, autosave: 1 }), \"*\");\n    }\n    resize() {}\n    fixHeight() {\n      this.resize();\n    }\n    focus() {\n      var e, t;\n      null != (t = null == (e = this.iframeNode) ? void 0 : e.focus) &&\n        t.call(e);\n    }\n    createTextOperation() {\n      return {\n        text: \"\",\n        selection: \"\",\n        selStart: 0,\n        selEnd: 0,\n        cutStart: null,\n        cutEnd: null,\n        replacement: null,\n        newSelStart: null,\n        newSelEnd: null,\n      };\n    }\n    executeTextOperation() {\n      return this.xml;\n    }\n    updateDomNodeText(e) {\n      this.loadXml(e);\n    }\n    setText(e, t) {\n      this.loadXml(e);\n    }\n  },\n  engine = $tw.browser ? DrawIOEditor : SimpleEngine;\nexports[\"edit-drawio\"] = editTextWidgetFactory(engine, engine);",
        "title": "$:/plugins/Gk0Wk/drawio/edit-drawio.js",
        "type": "application/javascript",
        "modified": "20230928082946806",
        "modifier": "oeyoews",
        "module-type": "widget",
        "Modern.TiddlyDev#Origin": "edit-drawio.ts"
    }
]